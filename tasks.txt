Кінопошук
Створи базову маршрутизацію для застосунку пошуку і зберігання фільмів. Прев'ю робочого застосунку дивись за посиланням.

themoviedb.org API
Для бекенду використовуй themoviedb.org API. Необхідно зареєструватися (можна ввести довільні дані) та отримати API-ключ. У цій роботі будуть використовуватися наступні ендпоінти.

/trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.
/search/search-movies пошук фільму за ключовим словом на сторінці фільмів.
/movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.
/movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.
/movies/get-movie-reviews запит оглядів для сторінки кінофільму.
Посилання на документацію

Маршрути
У застосунку повинні бути такі маршрути. Якщо користувач зайшов за неіснуючим маршрутом, його необхідно перенаправляти на домашню сторінку.

'/' – компонент Home, домашня сторінка зі списком популярних кінофільмів.
'/movies' – компонент Movies, сторінка пошуку кінофільмів за ключовим словом.
'/movies/:movieId' – компонент MovieDetails, сторінка з детальною інформацією про кінофільм.
/movies/:movieId/cast – компонент Cast, інформація про акторський склад. Рендериться на сторінці MovieDetails.
/movies/:movieId/reviews – компонент Reviews, інформація про огляди. Рендериться на сторінці MovieDetails.
Code Splitting (поділ коду)
Додай асинхронне завантаження JS-коду для маршрутів застосунку, використовуючи React.lazy() і Suspense.

Привіт:wave:
Новий тиждень - новий модуль. І тепер у нас маршрутизація. Починаємо ускладнювати наші проекти :face_with_peeking_eye:
Зверніть увагу на основні пункти під час виконання ДЗ:
Для сторінок створена папкa pages на рівні з components Під час сабміту форми обов’язково записувати слово для пошуку в параметри рядка запиту, сама форма повинна бути в окремому компоненті.
const handleSubmit= value => {
setSearchParams({ query: value });
};
На сторінках MoviesDetails, Cast, Reviews в масиві залежностей повинен бути id фільма який ми отримали з рядка запиту
const { movieId } = useParams();
useEffect(() => {
if (!movieId) return;
}, [movieId]);
Коли додаємо функціонал кнопки повернення назад, перевіряти, що точно є значення from в location.state
const location = useLocation();
const backLink = location.state?.from ?? '/';
Якщо з бека не прийшли фото акторів або постер, поставити дефолтну картинку
const defaultImg = '<https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700>'

<img src={
 movieData.poster_path ?
 [<https://image.tmdb.org/t/p/w500/${movieData.poster_path}>](<https://image.tmdb.org/t/p/w500/$%7BmovieData.poster_path%7D>)
 : defaultImg
}
width={250}
alt="poster"
/>
Створення списку фільмів на сторінках Home, Movies виносимо в окремий компонент MoviesList.
Домашня робота об'ємна, багатогранна і цікава. Обов'язково дивимося демо-відео і реалізуємо покроково. Якщо стилізуєте красивенько - мій особистий like :facepunch:
